/*
Copyright Â© 2023 Rohit Singh rkochhar@uwaterloo.ca
*/
package cmd

import (
	"fmt"
	"io"
	"os"
	"path/filepath"

	"github.com/spf13/cobra"
)

// makeCmd represents the make command
var makeCmd = &cobra.Command{
	Use:     "make",
	Aliases: []string{"m"},
	Short:   "Makes a new server with the given specifications",
	Long:    "Makes a new server with the given specifications",
	RunE: func(cmd *cobra.Command, args []string) error {
		conf, err := setConfiguration(cmd)
		if err != nil {
			return err
		}
		return makeAction(os.Stdout, conf)
	},
}

func makeAction(out io.Writer, conf Config) error {
	// Load in the information from the given configuration
	// regardless of whether it was configured through YAML or flags
	appName := conf.getAppName()
	dir := conf.getDirectory()
	modName := conf.getModName()
	fmt.Printf("Creating new skeleton server named %s in %s\n", appName, dir)
	// Check given directory
	if err := checkDirectory(dir); err != nil {
		return err
	}
	// Check and create target directory
	target := filepath.Join(dir, appName)
	if err := createTargetDirectory(target); err != nil {
		return err
	}
	// Create go mod
	if err := initializeGoMod(modName, target); err != nil {
		return err
	}
	// Create README
	readme, err := createFile("README.md", target)
	if err != nil {
		return err
	}
	if err := writeFile(readme, fmt.Sprintf("# %s\n\n", appName)); err != nil {
		return err
	}

	targets := [][]string{
		{"bin", "Contains compiled application binaries ready for production deployment"},
		{"cmd", ""},
		{"cmd/api", "Contains application specific code to run server"},
		{"internal", "Contains various ancillary packages used by API"},
		{"migrations", "Contains SQL migration files for database"},
		{"remote", "Contains configuration files and setup scripts for remote deployment"},
	}

	if err := ScaffoldProject(target, targets, readme); err != nil {
		return err
	}

	if err := GenerateGoSourceFiles(target); err != nil {
		return err
	}

	if err := GenerateContainerizationFiles(target); err != nil {
		return err
	}

	if err := GetGolangPackage(target, "github.com/julienschmidt/httprouter"); err != nil {
		return err
	}

	// Update readme with healthcheck API info
	if err := writeFile(readme, "\n## API Endpoints\n"); err != nil {
		return err
	}
	if err := writeFile(readme, "| HTTP Endpoint | Method | Info |\n|-----|------|------|\n|`/v1/healthcheck`| GET | Displays server status\n"); err != nil {
		return err
	}

	// Write a note about auto-generated documentation
	if err := writeFile(readme, "\n## `talbot` disclaimer\n"); err != nil {
		return err
	}
	if err := writeFile(readme, "This README has been autogenerated by [talbot](https://github.com/rohitkochhar/talbot)"); err != nil {
		return err
	}

	return nil
}

func init() {
	rootCmd.AddCommand(makeCmd)
	makeCmd.Flags().StringP("config", "c", "", "Configuration YAML file")
	makeCmd.Flags().StringP("app-name", "n", "", "Name of application")
	makeCmd.Flags().StringP("mod-name", "m", "", "Name of top-level application go module (default $app-name)")
	makeCmd.Flags().StringP("dir", "d", "./", "Path to target app directory")
}
